// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HwInf.Common
{
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Valentin\Documents\__FH\ITP3\collab\HW-INF\HwInf.Common\Contract.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Contract : ContractBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write(@"\document
[
    Info
    {
        Title = ""Ausleihvertrag""
        Subject = ""Technikum Wien Ausleihvertrag""
        Author = ""HW-INF.Technikum-Wien""
    }
]
{
	\section
	{
		\paragraph
		{
			Leihvertrag
		}
		\paragraph
		{
			Zwischen:
			der Fachhochschule Technikum Wien,
			vertreten durch eine/n MitarbeiterIn des Instituts für Informatik
			Adresse: Höchstädtplatz 5, A-1200 Wien 
		}
		\paragraph
		{
			-VerleiherIn-
		}
		\paragraph
		{
			und
		}
		\paragraph
		{
			");
            
            #line 41 "C:\Users\Valentin\Documents\__FH\ITP3\collab\HW-INF\HwInf.Common\Contract.tt"
            Write(ToStringHelper.ToStringWithCulture(GetEntleiher()));
            
            #line default
            #line hidden
            Write("\r\n\t\t}\r\n\t\t\\paragraph\r\n\t\t{\r\n\t\t\t-EntleiherIn-\r\n\t\t}\r\n\t\t\\paragraph\r\n\t\t{\r\n\t\t\twird der f" +
                    "olgende Leihvertrag geschlossen:\r\n\t\t}\r\n\t\t\\paragraph\r\n\t\t{\r\n\t\t§ 1 Vertragsgegensta" +
                    "nd\r\n\t\t}\r\n\r\n\t}\r\n}");
            return GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ContractBase
    {
        #region Fields
        private System.Text.StringBuilder _generationEnvironmentField;
        private System.CodeDom.Compiler.CompilerErrorCollection _errorsField;
        private System.Collections.Generic.List<int> _indentLengthsField;
        private string _currentIndentField = "";
        private bool _endsWithNewline;
        private System.Collections.Generic.IDictionary<string, object> _sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if (_generationEnvironmentField == null)
                {
                    _generationEnvironmentField = new System.Text.StringBuilder();
                }
                return _generationEnvironmentField;
            }
            set
            {
                _generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((_errorsField == null))
                {
                    _errorsField = new System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return _errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> IndentLengths
        {
            get
            {
                if ((_indentLengthsField == null))
                {
                    _indentLengthsField = new System.Collections.Generic.List<int>();
                }
                return _indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return _currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return SessionField;
            }
            set
            {
                SessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (GenerationEnvironment.Length == 0 
                || _endsWithNewline)
            {
                GenerationEnvironment.Append(_currentIndentField);
                _endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(System.Environment.NewLine, System.StringComparison.CurrentCulture))
            {
                _endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((_currentIndentField.Length == 0))
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(System.Environment.NewLine, (System.Environment.NewLine + _currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (_endsWithNewline)
            {
                GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - _currentIndentField.Length));
            }
            else
            {
                GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            _endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new System.CodeDom.Compiler.CompilerError
            {
                ErrorText = message
            };
            Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new System.CodeDom.Compiler.CompilerError
            {
                ErrorText = message,
                IsWarning = true
            };
            Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new System.ArgumentNullException("indent");
            }
            _currentIndentField = (_currentIndentField + indent);
            IndentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((IndentLengths.Count > 0))
            {
                int indentLength = IndentLengths[(IndentLengths.Count - 1)];
                IndentLengths.RemoveAt((IndentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = _currentIndentField.Substring((_currentIndentField.Length - indentLength));
                    _currentIndentField = _currentIndentField.Remove((_currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            IndentLengths.Clear();
            _currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider _formatProviderField  = System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return _formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        _formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                _formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return toStringHelperField;
            }
        }

        public System.Collections.Generic.IDictionary<string, object> SessionField
        {
            get
            {
                return _sessionField;
            }

            set
            {
                _sessionField = value;
            }
        }
        #endregion
    }
    #endregion
}
