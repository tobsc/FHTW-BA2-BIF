// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HwInf.Common
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using HwInf.Common.DAL;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Valentin\Documents\__FH\ITP3\collab\HW-INF\HwInf.Common\Contract.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Contract : ContractBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write(@"
\document
[
    Info
    {
        Title = ""Ausleihvertrag""
        Subject = ""Technikum Wien Ausleihvertrag""
        Author = ""HW-INF.Technikum-Wien""
    }
]
{
	\section
	{


		\paragraph [ Format { Font { Size = 14 Bold = true }
                              SpaceBefore = ""1cm""
							  SpaceAfter = ""1cm""
							  LeftIndent = ""6.6cm""} ]
		{
			Leihvertrag
		}
		\paragraph 
		{
			Zwischen
		}
		\paragraph [ Format {LeftIndent = ""1cm""} ]
		{
			der Fachhochschule Technikum Wien,
		}
		\paragraph [ Format {LeftIndent = ""1cm""} ]
		{
			vertreten durch eine/n MitarbeiterIn des Instituts für Informatik
		}
		\paragraph [ Format {LeftIndent = ""1cm""} ]
		{
			Adresse: Höchstädtplatz 5, A-1200 Wien 
		}
		\paragraph [ Format { Font { Bold = true } LeftIndent = ""12cm""} ]
		{
			-VerleiherIn-
		}
		\paragraph 
		{
			und
		}
		
		");
            
            #line 3 "C:\Users\Valentin\Documents\__FH\ITP3\collab\HW-INF\HwInf.Common\Contract.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getEntleiher()));
            
            #line default
            #line hidden
            this.Write("\n\t\t\n\t\t\\paragraph [ Format { Font { Bold = true } LeftIndent = \"12cm\"} ]\n\t\t{\n\t\t\t-E" +
                    "ntleiherIn-\n\t\t}\n\t\t\\paragraph\n\t\t{\n\t\t\twird der folgende Leihvertrag geschlossen:\n\t" +
                    "\t}\n\t\t\\paragraph [ Format { Font { Size = 7.5 Bold = true}\r\n\t\t\t\t\t\t\t  SpaceBefore " +
                    "= \"1cm\"} ]\n\t\t{\n\t\t§ 1 Vertragsgegenstand\n\t\t}\n\t\t\\paragraph [ Format { Font { Size " +
                    "= 7.5}\r\n\t\t\t\t\t\t\t  SpaceAfter = \"0.5cm\"\n\t\t\t\t\t\t\t  LeftIndent = \"1cm\"} ]\n\t\t{\n\t\t(1) G" +
                    "egenstand des Vertrages ist die Überlassung eines\n\t\t}\n\t\t\\paragraph [ Format { Sp" +
                    "aceAfter = \"0.5cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\n\t\t\tGeräts der Marke DAS MUSS " +
                    "NOCH GENERIERT WERDEN!!!!\n\t\t}\n\t\t\\paragraph [ Format { SpaceAfter = \"0.5cm\"\n\t\t\t\t\t" +
                    "\t\tLeftIndent = \"1cm\"}]\n\t\t{\n\t\t\tTyp\n\t\t}\n\t\t\\paragraph [ Format { SpaceAfter = \"0.5c" +
                    "m\" \n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\n\t\tInventarnummer:\n\t\t}\n\t\t\\paragraph [ Format " +
                    "{ Font { Size = 7.5} \n\t\t\t\t\t\t\tSpaceAfter = \"0.25cm\"} ]\n\t\t{\n\t\tmit Zubehör an den/d" +
                    "ie EntleiherIn für die befristete Nutzung auch außerhalb der Zeiten der Lehrvera" +
                    "nstaltungen nach § 6 Absatz 1 dieses\r\nLeihvertrages\n\t\t}\n\t\t\\paragraph [ Format { " +
                    "Font { Size = 7.5} \n\t\t\t\t\t\t\tSpaceAfter = \"0.25cm\"} ]\n\t\t{\n\t\tDas Zubehör ist in der" +
                    " als Anlage zu diesem Vertrag beigefügten Bestandsliste aufgeführt. Die Bestands" +
                    "liste ist Bestandteil dieses\r\nVertrages. Entleiherin oder Entleiher können nur S" +
                    "tudierende der FH Technikum Wien sein. Ein Anspruch auf Abschluss oder Verlänger" +
                    "ung\r\ndes Leihvertrages besteht nicht.\n\t\t}\n\t\t\\paragraph [ Format { Font { Size = " +
                    "7.5}\r\n\t\t\t\t\t\t\t  SpaceAfter = \"1cm\"} ]\n\t\t{\n\t\t(2)    Die Leihe erfolgt im Rahmen de" +
                    "r Ausbildung zur Unterstützung bei Projekten oder als befristete Übergangslösung" +
                    ".\r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5 Bold = true} \n\t\t\t\t\t\t\t\tSpaceAft" +
                    "er = \"0.25cm\"} ]\n\t\t{\n\t\t§ 2 Vertragsgemäßer Gebrauch, Ausschluss von der Nutzung\r" +
                    "\n\t\t}\n\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAfter = \"1cm\"} ]\n\t\t{\n\t\t(1) " +
                    "   Das Gerät wird ausschließlich für Zwecke von Forschung, Lehre und Studium ent" +
                    "liehen. Eine Nutzung für gewerbliche,\r\nerwerbswirtschaftliche, private oder sons" +
                    "tige Zwecke, die mit dem in § 1 Abs. 2 genannten Ausbildungszweck nicht vereinba" +
                    "r sind, ist\r\nuntersagt.\n\t\t}\n\t}\n\t\\section\n\t{\n\t\t\\paragraph [ Format { Font { Size " +
                    "= 7.5} SpaceAfter = \"0.25cm\"} ]\n\t\t{\n\t\t(2)    Eine Weitergabe bzw. Überlassung de" +
                    "s Gebrauchs des entliehenen Gerätes an Dritte ist untersagt. Technische Ressourc" +
                    "en des\r\nGerätes dürfen Dritten nicht zugänglich gemacht werden. Die auf dem Gerä" +
                    "t installierten Programme und Software dürfen vom/von\r\nder EntleiherIn nicht kop" +
                    "iert werden. Der/die EntleiherIn erhält ein vorinstalliertes System und muss das" +
                    " System während der Leihzeit\r\nselbst administrieren. Es bestehen keine Ansprüche" +
                    " auf regelmäßige Wartung des Systems seitens der VerleiherIn. Eingriffe in die\r\n" +
                    "Hardware bzw. die Ausstattung des Gerätes durch den/die EntleiherIn sind nicht g" +
                    "estattet. Solange der/die EntleiherIn das Gerät\r\nausgeliehen hat, darf er/sie ei" +
                    "gene legal erworbene Software installieren, soweit diese zur Erfüllung des Ausbi" +
                    "ldungszweckes\r\nerforderlich ist. Die VerleiherIn übernimmt für diesen Fall jedoc" +
                    "h keine Gewähr für die Nutzbarkeit des Geräts.\n\t\t}\n\t\t\\paragraph [ Format { Font " +
                    "{ Size = 7.5} SpaceAfter = \"1cm\"} ]\n\t\t{\n\t\t(3)    Die VerleiherIn kann den/die En" +
                    "tleiherIn von der weiteren Nutzung des Gerätes ausschließen, wenn dieser/diese s" +
                    "chuldhaft\r\nseinen/ihren Pflichten aus dieser Vereinbarung nicht nachkommt, das G" +
                    "erät für strafbare Handlungen missbraucht oder der\r\nFachhochschule Technikum Wie" +
                    "n durch sonstiges rechtswidriges Nutzerverhalten Nachteile entstehen.\r\n\t\t}\r\n\t\t\\p" +
                    "aragraph [ Format { Font { Size = 7.5 Bold = true} } ]\n\t\t{\r\n\t\t\t§ 3 Ausgabe und R" +
                    "ückgabe des Gerätes\r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAfter " +
                    "= \"0.25cm\" } ]\n\t\t{\r\n\t\t\tDas Gerät nebst Zubehör wird von dem in dieser Vereinbaru" +
                    "ng genannten Institut ausgegeben. Bei diesem Institut ist das Gerät nebst\r\nZubeh" +
                    "ör auch wieder zurückzugeben.\r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5 Bo" +
                    "ld = true} } ]\n\t\t{\r\n\t\t\t§ 4 Mängel, Sorgfaltspflichten und Haftung\r\n\t\t}\r\n\t\t\\parag" +
                    "raph [ Format { Font { Size = 7.5} SpaceAfter = \"0.25cm\" } ]\n\t\t{\r\n\t\t(1) Der/die " +
                    "EntleiherIn hat sich bei der Übergabe von dem ordnungsgemäßen Zustand des Geräte" +
                    "s zu überzeugen und festgestellte\r\nMängel und Schäden oder fehlendes Zubehör unv" +
                    "erzüglich dem Fachbereich anzuzeigen. Unterlässt der/die EntleiherIn die Anzeige" +
                    ",\r\nso gilt das Gerät als in mangelfreiem Zustand und mit dem genannten Zubehör ü" +
                    "bergeben, es sei denn, dass es sich um einen\r\nMangel handelt, der bei der Unters" +
                    "uchung nicht erkennbar war. Zeigt sich später ein solcher Mangel, so muss die An" +
                    "zeige\r\nunverzüglich schriftlich an Herrn Benedikt Salzbrunn (salzbrunn@technikum" +
                    "-wien.at) bzw. dessen Vertretung gemacht werden,\r\nanderenfalls ist der Einwand a" +
                    "usgeschlossen, ein mangelhaftes Gerät erhalten zu haben.\r\n\t\t}\r\n\t\t\\paragraph [ Fo" +
                    "rmat { Font { Size = 7.5} SpaceAfter = \"0.25cm\" } ]\n\t\t{\r\n\t\t(2) Der/die Entleiher" +
                    "In verpflichtet sich zur sorgfältigen Behandlung des Gerätes und des Zubehörs so" +
                    "wie dieses vor Verlusten (auch\r\nDiebstahl) und Beschädigungen zu schützen.\r\n\t\t}\r" +
                    "\n\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAfter = \"0.25cm\"} ]\n\t\t{\r\n\t\t(3) " +
                    "Der/die EntleiherIn hat Verluste sowie alle Mängel und Schäden des Gerätes, die " +
                    "während der Leihzeit auftreten, unverzüglich dem\r\nausgebenden Fachbereich zu mel" +
                    "den. Auf Verlangen ist ein schriftlicher Schadensbericht vorzulegen. Der Diebsta" +
                    "hl des Gerätes ist\r\ndarüber hinaus unverzüglich der Polizei anzuzeigen. Die Repa" +
                    "raturabwicklung bei aufgetretenen Mängeln und Schäden des Gerätes\r\nerfolgt aussc" +
                    "hließlich über die IT-Abteilung des Technikum Wien. Der/die EntleiherIn darf Rep" +
                    "araturen weder selbst durchführen noch\r\nin Auftrag geben.\r\n\t\t}\r\n\t\t\\paragraph [ F" +
                    "ormat { Font { Size = 7.5} SpaceAfter = \"0.25cm\" } ]\n\t\t{\r\n\t\t(4) Der/die Entleihe" +
                    "rIn haftet der VerleiherIn für die von ihm/ihr schuldhaft verursachten Schäden a" +
                    "n der Leihgabe sowie für alle\r\nsonstigen Schäden, die dadurch entstehen, dass de" +
                    "r/die EntleiherIn schuldhaft seinen/ihren Pflichten aus dieser Vereinbarung nich" +
                    "t\r\nnachkommt. Dem/der EntleiherIn obliegt der Beweis, dass ein schuldhaftes Verh" +
                    "alten nicht vorgelegen habe. Für Schäden an der\r\nLeihgabe, die durch vertragswid" +
                    "rigen Gebrauch entstehen, haftet der/die EntleiherIn unabhängig vom Verschulden." +
                    "\r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5 Bold = true} SpaceAfter = \"0.5c" +
                    "m\"} ]\n\t\t{\r\n\t\t§ 6 Laufzeit und Ende des Vertrages\r\n\t\t}\r\n\t\t\\paragraph [ Format { S" +
                    "paceAfter = \"0.25cm\"}]\n\t\t{\r\n\t\t(1) Das Gerät wird für die Zeit vom __.__.____ bis" +
                    " __.__.____ entliehen. \r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAf" +
                    "ter = \"0.25cm\" } ]\n\t\t{\r\n\t\tDer/die EntleiherIn ist verpflichtet, das Gerät währen" +
                    "d dieser Zeit der VerleiherIn auf deren Verlangen jederzeit vorzuzeigen. Die\r\nVe" +
                    "rleiherIn ist berechtigt, die Leihe jederzeit zu kündigen.\r\n\t\t}\r\n\t\t\\paragraph [ " +
                    "Format { Font { Size = 7.5}} ]\n\t\t{\r\n\t\t(2) Der Vertrag endet jedenfalls unabhängi" +
                    "g von dem in Absatz (1) genannten Termin:\r\n\t\t}\r\n\t\t\\paragraph [ Format { Font { S" +
                    "ize = 7.5}} ]\n\t\t{\r\n\t\ta) wenn der/die EntleiherIn nicht mehr Studierende(r) der F" +
                    "H Technikum Wien ist,\r\n\t\t}\r\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAfter" +
                    " = \"0.25cm\"} ]\n\t\t{\r\t\tb) in den Fällen des § 2 Absatz 3 dieses Leihvertrages.\r\t\t}" +
                    "\r\t\t\\paragraph [ Format { Font { Size = 7.5} SpaceAfter = \"0.25cm\"} ]\n\t\t{\r\t\t(3) M" +
                    "it dem Ende des Vertrages ist das Gerät nebst Zubehör unaufgefordert und unverzü" +
                    "glich zurückzugeben.\r\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5 Bold = true}" +
                    " SpaceAfter = \"0.5cm\"} ]\n\t\t{\r\n\t\t§ 7 Nebenbestimmungen\r\t\t}\r\n\t\t\\paragraph [ Format" +
                    " { Font { Size = 7.5} SpaceAfter = \"0.25cm\"} ]\n\t\t{\r\n\t\t(1) Änderungen und Ergänzu" +
                    "ngen dieser Vereinbarung sowie Nebenabreden bedürfen der Schriftform.\r\n\t\t}\r\n\t\t\\p" +
                    "aragraph [ Format { Font { Size = 7.5} SpaceAfter = \"0.25cm\"} ]\n\t\t{\r\n\t\t(2) Sollt" +
                    "e eine Bestimmung dieses Vertrages unwirksam oder undurchführbar sein, beeinträc" +
                    "htigt dies nicht die Geltung der übrigen\r\nBestimmungen dieses Vertrages. Die Ver" +
                    "tragsparteien werden sich in einem solchen Fall bemühen, die unwirksame oder\r\nun" +
                    "durchführbare Bestimmung durch eine andere zu ersetzen, die der zu ersetzenden B" +
                    "estimmung möglichst nahe kommt.\r\t\t}\r\n\t\t\\paragraph [ Format { Font { Size = 7.5} " +
                    "SpaceAfter = \"0.5cm\"} ]\n\t\t{\r\n\t\t(3) Es gilt österreichisches Recht, Gerichtsstand" +
                    " ist das sachlich zuständige Gericht in Wien.\r\n\t\t}\r\n\t\t\\paragraph [ Format { Spac" +
                    "eAfter = \"1cm\"} ]\n\t\t{\r\n\t\tWien, den __.__.____ GENERIEREN!!!\r\n\t\t}\r\n\t\t\\paragraph \n" +
                    "\t\t{ \r\n\t\t_____________________________                    _______________________" +
                    "______\r\t\t}\r\n\t\t\\paragraph \n\t\t{\r\n\t\tUnterschrift VerleiherIn                       " +
                    "               Unterschrift EntleiherIn\r\n\t\t}\r\n\t}\r\n\t\\section\r\n\t{\r\n\t\t\\paragraph  [" +
                    "Format { Font { Bold = true} SpaceBefore = \"1cm\" SpaceAfter = \"0.25cm\"}]\n\t\t{\r\n\t\t" +
                    "Bestätigung des/der EntleiherIn über die Übernahme des Gerätes:\r\n\t\t}\r\n\t\t\\paragra" +
                    "ph  [Format { SpaceAfter = \"0.5cm\"}]\n\t\t{\r\n\t\tDas oben genannte Gerät wurde heute " +
                    "(bitte ankreuzen und ggf. ergänzen)\r\n\t\t}\r\n\t\t\\paragraph  [Format { SpaceAfter = \"" +
                    "0.25cm\"}]\n\t\t{\r\t\tO    in einwandfreiem Zustand und mit komplettem Zubehör (siehe " +
                    "Bestandsliste in der Anlage) übernommen\r\t\t}\r\n\t\t\\paragraph  [Format { SpaceAfter " +
                    "= \"0.25cm\"}]\n\t\t{\r\n\t\tO    mit folgenden Mängeln/Schäden übernommen\r\n\t\t}\r\n\t\t\\parag" +
                    "raph  [Format { SpaceAfter = \"0.25cm\" LeftIndent =\"1cm\"}]\n\t\t{\r\n\t\t..............." +
                    "....................................\r\n\t\t}\r\n\t\t\\paragraph  [Format { SpaceAfter = " +
                    "\"0.25cm\" LeftIndent =\"1cm\"}]\n\t\t{\r\n\t\t............................................" +
                    ".......\r\n\t\t}\r\n\t\t\\paragraph  [Format { SpaceAfter = \"0.5cm\" LeftIndent =\"1cm\"}]\n\t" +
                    "\t{\r\n\t\t...................................................\r\n\t\t}\r\n\t\t\\paragraph [ F" +
                    "ormat { SpaceAfter = \"1cm\"} ]\n\t\t{\r\n\t\tWien, den __.__.____ GENERIEREN!!!\r\n\t\t}\r\n\t\t" +
                    "\\paragraph [ Format { SpaceAfter = \"1cm\"}]\r\n\t\t{\r\n\t\tUnterschrift des/der Entleihe" +
                    "rIn:......................................................................\r\n\t\t}\r" +
                    "\n\t}\r\n\t\\section\n\t{\r\n\t\t\\paragraph [ Format { Font { Size = 14 Bold = true }\r\n     " +
                    "                         SpaceBefore = \"1cm\"\r\n\t\t\t\t\t\t\t  SpaceAfter = \"1cm\"\n\t\t\t\t\t\t" +
                    "\t  LeftIndent = \"6.6cm\"} ]\n\t\t{\r\n\t\tAnlage\r\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfte" +
                    "r = \"1cm\"}]\r\n\t\t{\r\n\t\tzum Leihvertrag zwischen der FH Technikum Wien und GENERIERE" +
                    "N\r\n\t\t}\r\n\t\t\\paragraph  [ Format { SpaceAfter = \"1cm\"}]\r\n\t\t{\r\n\t\tBestandsliste des " +
                    "Zubehörs für das\r\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"1cm\"\n\t\t\t\t\t\t\tLeftInde" +
                    "nt = \"1cm\"}]\n\t\t{\n\t\t\tGerät der Marke DAS MUSS NOCH GENERIERT WERDEN!!!!\n\t\t}\n\t\t\\pa" +
                    "ragraph [ Format { SpaceAfter = \"1cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\n\t\t\tTyp\n\t\t}" +
                    "\n\t\t\\paragraph [ Format { SpaceAfter = \"1cm\" \n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\n\t\tI" +
                    "nventarnummer:\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"1cm\"\n\t\t\t\t\t\t\tLeftIndent" +
                    " = \"1cm\"}]\n\t\t{\r\n\t\t(unzutreffendes bitte deutlich durchstreichen)\r\t\t}\r\n\t\t\\paragra" +
                    "ph [ Format { SpaceAfter = \"0.25cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\r\n\t\t1. Gerät\r" +
                    "\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"0.25cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n" +
                    "\t\t{\r\n\t\t2. Netzkabel\r\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"0.25cm\"\n\t\t\t\t\t\t\tL" +
                    "eftIndent = \"1cm\"}]\n\t\t{\r\n\t\t3. Schutzhülle\r\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAft" +
                    "er = \"0.25cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\r\n\t\t4. Original-Schachtel und Bedie" +
                    "nungsanleitung\r\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"0.5cm\"\n\t\t\t\t\t\t\tLeftInd" +
                    "ent = \"1cm\"}]\n\t\t{\r\n\t\t5. Kopfhörer\r\n\t\t}\r\n\t\t\\paragraph [ Format { SpaceAfter = \"0." +
                    "25cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\r\n\t\t6. _______________\r\n\t\t}\r\n\t\t\\paragraph [" +
                    " Format { SpaceAfter = \"0.5cm\"\n\t\t\t\t\t\t\tLeftIndent = \"1cm\"}]\n\t\t{\r\n\t\t7. ___________" +
                    "____\r\n\t\t}\r\n\r\n\r\n\r\n\r\n\n\t}\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ContractBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
